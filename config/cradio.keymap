// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4
#define MOUSE 5
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define U_WH_U &msc SCRL_UP
#define U_WH_D &msc SCRL_DOWN
#define U_WH_L &msc SCRL_LEFT
#define U_WH_R &msc SCRL_RIGHT

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    macros {
        code_block: code_block {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_BRACE &kp C &kp O &kp D &kp E &kp RBRC &kp RET &kp RET &kp LEFT_BRACE &kp C &kp O &kp D &kp E &kp RBRC &kp UP_ARROW>;
            label = "CODE_BLOCK";
        };

        instance: instance {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp I &kp N &kp S &kp T &kp A &kp N &kp C &kp E &kp EQUAL>;
            label = "INSTANCE";
        };

        pattern: pattern {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp P &kp A &kp T &kp T &kp E &kp R &kp N &kp EQUAL>;
            label = "PATTERN";
        };
    };

    combos {
        compatible = "zmk,combos";

        left_para {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <1 2>;
        };

        right_para {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <2 3>;
        };

        left_brack {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <11 12>;
        };

        right_brack {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <12 13>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <21 22>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <22 23>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <5 6>;
        };

        back_slash {
            bindings = <&kp BACKSLASH>;
            key-positions = <15 16>;
        };

        instance {
            bindings = <&instance>;
            key-positions = <8 9>;
        };

        pattern {
            bindings = <&pattern>;
            key-positions = <18 19>;
        };

        code_block {
            bindings = <&code_block>;
            key-positions = <28 29>;
        };

        volume_up {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <3 4>;
        };

        volume_down {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <13 14>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W  &kp E  &kp R  &kp T            &kp Y      &kp U  &kp I      &kp O    &kp P
&kp A             &kp S  &kp D  &kp F  &kp G            &kp H      &kp J  &kp K      &kp L    &kp BACKSPACE
&mt LEFT_SHIFT Z  &kp X  &kp C  &kp V  &kp B            &kp N      &kp M  &kp COMMA  &kp DOT  &mt RGUI TAB
                                &mo 2  &mt LSHFT RET    &kp SPACE  &mo 1
            >;
        };

        layer_1 {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp N3  &kp N4  &kp N5    &kp N6  &kp N7    &kp N8        &kp N9     &kp N0
&trans        &trans        &trans  &trans  &trans    &trans  &kp LEFT  &kp UP_ARROW  &kp RIGHT  &kp DEL
&trans        &trans        &trans  &trans  &trans    &trans  &trans    &kp DOWN      &trans     &trans
                                    &mo 3   &trans    &trans  &trans
            >;
        };

        layer_2 {
            bindings = <
&kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT           &kp CARET  &kp AMPS   &kp ASTRK  &kp GRAVE  &kp TILDE
&kp DQT   &kp LBKT  &kp LBRC  &kp LPAR  &kp LESS_THAN       &kp FSLH   &kp MINUS  &kp EQUAL  &kp COLON  &kp SEMI
&kp SQT   &kp RBKT  &kp RBRC  &kp RPAR  &kp GREATER_THAN    &kp BSLH   &kp UNDER  &kp PLUS   &kp PIPE   &kp QMARK
                              &trans    &trans              &kp DEL    &trans
            >;
        };

        layer_3 {
            bindings = <
&bt BT_CLR    &trans  &trans  &trans  &bt BT_CLR_ALL    &trans  &trans  &trans  &trans  &trans
&trans        &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans
&bt BT_SEL 0  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans
                              &trans  &trans            &trans  &trans
            >;
        };
    };
};
